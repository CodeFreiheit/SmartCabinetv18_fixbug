<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\bootload.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\bootload.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Dec 26 13:59:40 2018
<BR><P>
<H3>Maximum Stack Usage =       4512 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; iap_write_appbin &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2e]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[ea]">f_open</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11a]">follow_path</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[4]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">Get_Max_Lun</a> from usb_prop.o(i.Get_Max_Lun) referenced from usb_prop.o(i.MASS_Data_Setup)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">MASS_Data_Setup</a> from usb_prop.o(i.MASS_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">MASS_GetConfigDescriptor</a> from usb_prop.o(i.MASS_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">MASS_GetDeviceDescriptor</a> from usb_prop.o(i.MASS_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">MASS_GetStringDescriptor</a> from usb_prop.o(i.MASS_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">MASS_Get_Interface_Setting</a> from usb_prop.o(i.MASS_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">MASS_NoData_Setup</a> from usb_prop.o(i.MASS_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[6]">MASS_Reset</a> from usb_prop.o(i.MASS_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">MASS_Status_In</a> from usb_prop.o(i.MASS_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">MASS_Status_Out</a> from usb_prop.o(i.MASS_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5]">MASS_init</a> from usb_prop.o(i.MASS_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[10]">Mass_Storage_ClearFeature</a> from usb_prop.o(i.Mass_Storage_ClearFeature) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">Mass_Storage_SetConfiguration</a> from usb_prop.o(i.Mass_Storage_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[11]">Mass_Storage_SetDeviceAddress</a> from usb_prop.o(i.Mass_Storage_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[15]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 36 times from usb_istr.o(.data)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5d]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5b]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[1b]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1e]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USBWakeUp_IRQHandler</a> from hw_config.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_LP_CAN1_RX0_IRQHandler</a> from hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5f]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[58]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[1]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[134]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[135]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[136]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[137]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[138]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[125]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[12b]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[13b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[13c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>Bot_Abort</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_bot.o(i.Bot_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bot_Abort &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_ClearFeature
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[69]"></a>CBW_Decode</STRONG> (Thumb, 678 bytes, Stack size 8 bytes, usb_bot.o(i.CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[79]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[a4]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[a3]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_SetConfiguration
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_NoData_Setup
</UL>

<P><STRONG><a name="[aa]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>EP1_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EP1_IN_Callback &rArr; Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EP2_OUT_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EP2_OUT_Callback &rArr; Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[87]"></a>Enter_LowPowerMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Enter_LowPowerMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[89]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[8c]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[92]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteNoCheck
</UL>

<P><STRONG><a name="[90]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[8a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[8d]"></a>FlashRead</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stmflash.o(i.FlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[8e]"></a>FlashReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(i.FlashReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>

<P><STRONG><a name="[8f]"></a>FlashWrite</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stmflash.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FlashWrite &rArr; FlashWriteNoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteNoCheck
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>

<P><STRONG><a name="[91]"></a>FlashWriteNoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(i.FlashWriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashWriteNoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[99]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[82]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[dc]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[af]"></a>GetEPRxStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
</UL>

<P><STRONG><a name="[7e]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[5e]"></a>Get_Max_Lun</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Get_Max_Lun))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.MASS_Data_Setup)
</UL>
<P><STRONG><a name="[93]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[94]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[97]"></a>KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>KEY_Scan</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>Leave_LowPowerMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Leave_LowPowerMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[bb]"></a>Led_RW_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(i.Led_RW_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[ba]"></a>Led_RW_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(i.Led_RW_ON))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[bf]"></a>MAL_GetStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mass_mal.o(i.MAL_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
</UL>

<P><STRONG><a name="[9e]"></a>MAL_Read</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mass_mal.o(i.MAL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MAL_Read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[a0]"></a>MAL_Write</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mass_mal.o(i.MAL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[9]"></a>MASS_Data_Setup</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>MASS_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>MASS_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MASS_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>MASS_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.MASS_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MASS_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MASS_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>MASS_NoData_Setup</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_NoData_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MASS_NoData_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>MASS_Reset</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MASS_Reset &rArr; USB_NotConfigured_LED &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>MASS_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>MASS_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.MASS_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>MASS_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(i.MASS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MASS_init &rArr; PowerOn &rArr; USB_Cable_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Mass_Storage_ClearFeature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_prop.o(i.Mass_Storage_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mass_Storage_ClearFeature &rArr; Bot_Abort &rArr; SetEPRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>Mass_Storage_In</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mass_Storage_In &rArr; SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxStatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[86]"></a>Mass_Storage_Out</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, usb_bot.o(i.Mass_Storage_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Mass_Storage_Out &rArr; CBW_Decode &rArr; SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP2_OUT_Callback
</UL>

<P><STRONG><a name="[f]"></a>Mass_Storage_SetConfiguration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_prop.o(i.Mass_Storage_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mass_Storage_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Mass_Storage_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.Mass_Storage_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[127]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[83]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[ad]"></a>PowerOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PowerOn &rArr; USB_Cable_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[c3]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[98]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[cf]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[b8]"></a>Read_Memory</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, memory.o(i.Read_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_Memory &rArr; MAL_Read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[bc]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Resume &rArr; Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[bd]"></a>Resume_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Resume_Init &rArr; Leave_LowPowerMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[be]"></a>SCSI_Address_Management</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usb_scsi.o(i.SCSI_Address_Management))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SCSI_Address_Management &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
</UL>

<P><STRONG><a name="[77]"></a>SCSI_Format_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Format_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Format_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[6d]"></a>SCSI_Inquiry_Cmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Inquiry_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCSI_Inquiry_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[78]"></a>SCSI_Invalid_Cmd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Invalid_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Invalid_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[70]"></a>SCSI_ModeSense10_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ModeSense10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ModeSense10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[6f]"></a>SCSI_ModeSense6_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ModeSense6_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ModeSense6_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[74]"></a>SCSI_Read10_Cmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Read10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_Read10_Cmd &rArr; Read_Memory &rArr; MAL_Read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[72]"></a>SCSI_ReadCapacity10_Cmd</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadCapacity10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ReadCapacity10_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[71]"></a>SCSI_ReadFormatCapacity_Cmd</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_ReadFormatCapacity_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_ReadFormatCapacity_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[6c]"></a>SCSI_RequestSense_Cmd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_RequestSense_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SCSI_RequestSense_Cmd &rArr; Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[6e]"></a>SCSI_Start_Stop_Unit_Cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Start_Stop_Unit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Start_Stop_Unit_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[73]"></a>SCSI_TestUnitReady_Cmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_TestUnitReady_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_TestUnitReady_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[76]"></a>SCSI_Verify10_Cmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_scsi.o(i.SCSI_Verify10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCSI_Verify10_Cmd &rArr; Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[75]"></a>SCSI_Write10_Cmd</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usb_scsi.o(i.SCSI_Write10_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCSI_Write10_Cmd &rArr; Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Scsi_Sense_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[c2]"></a>SPI2_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[c7]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[cb]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[c6]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[c8]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[ca]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[c9]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[c5]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[95]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[a7]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[a8]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[68]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[ab]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[a9]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[80]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[67]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bot_Abort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[a6]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[6b]"></a>Set_CSW</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usb_bot.o(i.Set_CSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Set_CSW &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Start_Stop_Unit_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_In
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Memory
</UL>

<P><STRONG><a name="[6a]"></a>Set_Scsi_Sense_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_scsi.o(i.Set_Scsi_Sense_Data))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Address_Management
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_TestUnitReady_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Invalid_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Format_Cmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBW_Decode
</UL>

<P><STRONG><a name="[ce]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[b4]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[5c]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[a2]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetStringDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetDeviceDescriptor
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_GetConfigDescriptor
</UL>

<P><STRONG><a name="[5d]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[5b]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[b2]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b3]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b6]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b5]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[d1]"></a>Suspend</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Suspend &rArr; Enter_LowPowerMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[fb]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>Transfer_Data_Request</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usb_bot.o(i.Transfer_Data_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Transfer_Data_Request &rArr; USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense6_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ModeSense10_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Inquiry_Cmd
</UL>

<P><STRONG><a name="[41]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d2]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d4]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[d3]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>USB_Cable_Config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Cable_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[12d]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>USB_Interrupts_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>USB_Istr</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>USB_NotConfigured_LED</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_config.o(i.USB_NotConfigured_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_NotConfigured_LED &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_Reset
</UL>

<P><STRONG><a name="[db]"></a>USB_Port_Set</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hw_config.o(i.USB_Port_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Port_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASS_init
</UL>

<P><STRONG><a name="[b0]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mass_Storage_Out
</UL>

<P><STRONG><a name="[b9]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transfer_Data_Request
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Memory
</UL>

<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[dd]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[e0]"></a>W25QXX_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[9f]"></a>W25QXX_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Read
</UL>

<P><STRONG><a name="[e1]"></a>W25QXX_ReadSR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[df]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[a1]"></a>W25QXX_Write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
</UL>

<P><STRONG><a name="[de]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[e2]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[e3]"></a>W25QXX_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[c1]"></a>Write_Memory</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, memory.o(i.Write_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Write_Memory &rArr; MAL_Write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CSW
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAL_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_ON
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_RW_OFF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10_Cmd
</UL>

<P><STRONG><a name="[e4]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[140]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_read_flash_test
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_flash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_NotConfigured_LED
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[142]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[143]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e8]"></a>boot_write_to_flash</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, main.o(i.boot_write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = boot_write_to_flash &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[fa]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>dir_sdi</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[10b]"></a>disk_initialize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_initialize &rArr; W25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[115]"></a>disk_ioctl</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[10c]"></a>disk_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disk_read &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[123]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[10d]"></a>disk_write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[10e]"></a>exfuns_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, exfuns.o(i.exfuns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = exfuns_init &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_read_flash_test
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_flash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[eb]"></a>f_lseek</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[113]"></a>f_mkfs</STRONG> (Thumb, 1622 bytes, Stack size 112 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>f_open</STRONG> (Thumb, 384 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + In Cycle
<LI>Call Chain = f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_read_flash_test
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_flash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[11f]"></a>f_read</STRONG> (Thumb, 482 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_read_flash_test
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_flash
</UL>

<P><STRONG><a name="[110]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[121]"></a>f_unlink</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = f_unlink &rArr; follow_path &rArr; create_name &rArr; ff_convert &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_unlink
</UL>

<P><STRONG><a name="[ed]"></a>f_write</STRONG> (Thumb, 540 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
</UL>

<P><STRONG><a name="[f7]"></a>ff_convert</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, mycc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ff_convert &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[119]"></a>ff_memalloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[11e]"></a>ff_memfree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ff_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[f2]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mycc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[f4]"></a>get_fat</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[116]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[124]"></a>iap_load_app</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iap.o(i.iap_load_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iap_load_app
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>iap_write_appbin</STRONG> (Thumb, 218 bytes, Stack size 4192 bytes, iap.o(i.iap_write_appbin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4488<LI>Call Chain = iap_write_appbin &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4512<LI>Call Chain = main &rArr; iap_write_appbin &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_unlink
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_read_flash_test
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_flash
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_write_to_flash
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12c]"></a>mf_unlink</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key.o(i.mf_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = mf_unlink &rArr; f_unlink &rArr; follow_path &rArr; create_name &rArr; ff_convert &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>my_mem_free</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[0]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[1]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>myfree</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[10f]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[12e]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[f5]"></a>put_fat</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[12a]"></a>read_boot_flash</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.read_boot_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = read_boot_flash &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>update_read_flash_test</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.update_read_flash_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = update_read_flash_test &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cc]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cd]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[7d]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[81]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[84]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[b1]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[ef]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[f8]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[112]"></a>clmt_clust</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[f1]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[f3]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[f6]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = create_name &rArr; ff_convert &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[fc]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[ff]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[fe]"></a>dir_next</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[104]"></a>dir_read</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[106]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[10a]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[118]"></a>find_volume</STRONG> (Thumb, 966 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[109]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[11a]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = follow_path &rArr; create_name &rArr; ff_convert &rArr; f_open &rArr;  follow_path (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[108]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[114]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[11b]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[101]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[107]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[f9]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[f0]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[105]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[11d]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[11c]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[100]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[120]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[102]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sync_window &rArr; disk_write &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[111]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e5]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[e7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
